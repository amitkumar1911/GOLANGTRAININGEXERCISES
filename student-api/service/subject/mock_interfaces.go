// Code generated by MockGen. DO NOT EDIT.
// Source: subject.go

// Package subject is a generated GoMock package.
package subject

import (
	reflect "reflect"

	models "github.com/GOLANGTRAININGEXERCISES/student-api/models"
	gomock "github.com/golang/mock/gomock"
)

// Mocksubjectstore is a mock of subjectstore interface.
type Mocksubjectstore struct {
	ctrl     *gomock.Controller
	recorder *MocksubjectstoreMockRecorder
}

// MocksubjectstoreMockRecorder is the mock recorder for Mocksubjectstore.
type MocksubjectstoreMockRecorder struct {
	mock *Mocksubjectstore
}

// NewMocksubjectstore creates a new mock instance.
func NewMocksubjectstore(ctrl *gomock.Controller) *Mocksubjectstore {
	mock := &Mocksubjectstore{ctrl: ctrl}
	mock.recorder = &MocksubjectstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksubjectstore) EXPECT() *MocksubjectstoreMockRecorder {
	return m.recorder
}

// CheckSubjectExist mocks base method.
func (m *Mocksubjectstore) CheckSubjectExist(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSubjectExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckSubjectExist indicates an expected call of CheckSubjectExist.
func (mr *MocksubjectstoreMockRecorder) CheckSubjectExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSubjectExist", reflect.TypeOf((*Mocksubjectstore)(nil).CheckSubjectExist), arg0)
}

// CreateSubject mocks base method.
func (m *Mocksubjectstore) CreateSubject(arg0 models.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubject", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubject indicates an expected call of CreateSubject.
func (mr *MocksubjectstoreMockRecorder) CreateSubject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubject", reflect.TypeOf((*Mocksubjectstore)(nil).CreateSubject), arg0)
}

// FindNamesById mocks base method.
func (m *Mocksubjectstore) FindNamesById(arg0 []int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNamesById", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNamesById indicates an expected call of FindNamesById.
func (mr *MocksubjectstoreMockRecorder) FindNamesById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNamesById", reflect.TypeOf((*Mocksubjectstore)(nil).FindNamesById), arg0)
}

// GetSubject mocks base method.
func (m *Mocksubjectstore) GetSubject(id int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubject", id)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubject indicates an expected call of GetSubject.
func (mr *MocksubjectstoreMockRecorder) GetSubject(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubject", reflect.TypeOf((*Mocksubjectstore)(nil).GetSubject), id)
}

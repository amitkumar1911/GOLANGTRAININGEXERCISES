// Code generated by MockGen. DO NOT EDIT.
// Source: enroll.go

// Package enrollment is a generated GoMock package.
package enrollment

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockenrollmentStore is a mock of enrollmentStore interface.
type MockenrollmentStore struct {
	ctrl     *gomock.Controller
	recorder *MockenrollmentStoreMockRecorder
}

// MockenrollmentStoreMockRecorder is the mock recorder for MockenrollmentStore.
type MockenrollmentStoreMockRecorder struct {
	mock *MockenrollmentStore
}

// NewMockenrollmentStore creates a new mock instance.
func NewMockenrollmentStore(ctrl *gomock.Controller) *MockenrollmentStore {
	mock := &MockenrollmentStore{ctrl: ctrl}
	mock.recorder = &MockenrollmentStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockenrollmentStore) EXPECT() *MockenrollmentStoreMockRecorder {
	return m.recorder
}

// FindRollById mocks base method.
func (m *MockenrollmentStore) FindRollById(arg0 int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRollById", arg0)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRollById indicates an expected call of FindRollById.
func (mr *MockenrollmentStoreMockRecorder) FindRollById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRollById", reflect.TypeOf((*MockenrollmentStore)(nil).FindRollById), arg0)
}

// Insert mocks base method.
func (m *MockenrollmentStore) Insert(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockenrollmentStoreMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockenrollmentStore)(nil).Insert), arg0, arg1)
}

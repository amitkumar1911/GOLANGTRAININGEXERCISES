// Code generated by MockGen. DO NOT EDIT.
// Source: student.go

// Package student is a generated GoMock package.
package student

import (
	reflect "reflect"

	models "github.com/GOLANGTRAININGEXERCISES/student-api/models"
	gomock "github.com/golang/mock/gomock"
)

// Mockstudentstore is a mock of studentstore interface.
type Mockstudentstore struct {
	ctrl     *gomock.Controller
	recorder *MockstudentstoreMockRecorder
}

// MockstudentstoreMockRecorder is the mock recorder for Mockstudentstore.
type MockstudentstoreMockRecorder struct {
	mock *Mockstudentstore
}

// NewMockstudentstore creates a new mock instance.
func NewMockstudentstore(ctrl *gomock.Controller) *Mockstudentstore {
	mock := &Mockstudentstore{ctrl: ctrl}
	mock.recorder = &MockstudentstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstudentstore) EXPECT() *MockstudentstoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mockstudentstore) Create(arg0 models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockstudentstoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mockstudentstore)(nil).Create), arg0)
}

// Get mocks base method.
func (m *Mockstudentstore) Get(arg0 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockstudentstoreMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockstudentstore)(nil).Get), arg0)
}

// StudentExist mocks base method.
func (m *Mockstudentstore) StudentExist(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StudentExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// StudentExist indicates an expected call of StudentExist.
func (mr *MockstudentstoreMockRecorder) StudentExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StudentExist", reflect.TypeOf((*Mockstudentstore)(nil).StudentExist), arg0)
}

// MocksubjectService is a mock of subjectService interface.
type MocksubjectService struct {
	ctrl     *gomock.Controller
	recorder *MocksubjectServiceMockRecorder
}

// MocksubjectServiceMockRecorder is the mock recorder for MocksubjectService.
type MocksubjectServiceMockRecorder struct {
	mock *MocksubjectService
}

// NewMocksubjectService creates a new mock instance.
func NewMocksubjectService(ctrl *gomock.Controller) *MocksubjectService {
	mock := &MocksubjectService{ctrl: ctrl}
	mock.recorder = &MocksubjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksubjectService) EXPECT() *MocksubjectServiceMockRecorder {
	return m.recorder
}

// SubjectExist mocks base method.
func (m *MocksubjectService) SubjectExist(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubjectExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SubjectExist indicates an expected call of SubjectExist.
func (mr *MocksubjectServiceMockRecorder) SubjectExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubjectExist", reflect.TypeOf((*MocksubjectService)(nil).SubjectExist), arg0)
}

// MockenrollmentService is a mock of enrollmentService interface.
type MockenrollmentService struct {
	ctrl     *gomock.Controller
	recorder *MockenrollmentServiceMockRecorder
}

// MockenrollmentServiceMockRecorder is the mock recorder for MockenrollmentService.
type MockenrollmentServiceMockRecorder struct {
	mock *MockenrollmentService
}

// NewMockenrollmentService creates a new mock instance.
func NewMockenrollmentService(ctrl *gomock.Controller) *MockenrollmentService {
	mock := &MockenrollmentService{ctrl: ctrl}
	mock.recorder = &MockenrollmentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockenrollmentService) EXPECT() *MockenrollmentServiceMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockenrollmentService) Insert(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockenrollmentServiceMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockenrollmentService)(nil).Insert), arg0, arg1)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: student.go

// Package student is a generated GoMock package.
package student

import (
	reflect "reflect"

	models "github.com/GOLANGTRAININGEXERCISES/student-api/models"
	gomock "github.com/golang/mock/gomock"
)

// MockstudentService is a mock of studentService interface.
type MockstudentService struct {
	ctrl     *gomock.Controller
	recorder *MockstudentServiceMockRecorder
}

// MockstudentServiceMockRecorder is the mock recorder for MockstudentService.
type MockstudentServiceMockRecorder struct {
	mock *MockstudentService
}

// NewMockstudentService creates a new mock instance.
func NewMockstudentService(ctrl *gomock.Controller) *MockstudentService {
	mock := &MockstudentService{ctrl: ctrl}
	mock.recorder = &MockstudentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstudentService) EXPECT() *MockstudentServiceMockRecorder {
	return m.recorder
}

// CheckExist mocks base method.
func (m *MockstudentService) CheckExist(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExist indicates an expected call of CheckExist.
func (mr *MockstudentServiceMockRecorder) CheckExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExist", reflect.TypeOf((*MockstudentService)(nil).CheckExist), arg0, arg1)
}

// CreateStudent mocks base method.
func (m *MockstudentService) CreateStudent(arg0 models.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockstudentServiceMockRecorder) CreateStudent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockstudentService)(nil).CreateStudent), arg0)
}

// GetId mocks base method.
func (m *MockstudentService) GetId(arg0 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetId indicates an expected call of GetId.
func (mr *MockstudentServiceMockRecorder) GetId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockstudentService)(nil).GetId), arg0)
}

// GetStudent mocks base method.
func (m *MockstudentService) GetStudent(arg0 int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudent", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudent indicates an expected call of GetStudent.
func (mr *MockstudentServiceMockRecorder) GetStudent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudent", reflect.TypeOf((*MockstudentService)(nil).GetStudent), arg0)
}
